<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\HomeController;
use App\Http\Requests\RegisterFormRequest;
use App\Listeners\SendEmailNewUserListener;
use App\Notifications\NewUserNotification;
use Database\Factories\UserFactory;
use Domain\Auth\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Notification;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;


class RegisterControllerTest extends TestCase
{
    use RefreshDatabase;
    protected array $request;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->request = RegisterFormRequest::factory()->create([
            'email' => 'kek@ya.ru',
            'password' => '12312344asd!',
            'password_confirmation' => '12312344asd!'
        ]);
    }
    private function request(): TestResponse
    {
        return $this->post(
            action([RegisterController::class, 'registerMailSubmit']),
            $this->request
        );
    }
    private function findUser(): Builder|Model
    {
        return User::query()
            ->where('email', $this->request['email'])->first();
    }
    /** @test */
    public function it_register_page_success(): void
    {
        $this->get(action([RegisterController::class, 'registerShow']))
            ->assertOk()
            ->assertViewIs('auth.register')
            ->assertSee('Регистрация')
            ->assertSee('Почта')
            ->assertSee('GitHub')
        ;
    }
    /** @test */
    public function it_register_mail_page_success(): void
    {
        $this->get(action([RegisterController::class, 'registerMailShow']))
            ->assertOk()
            ->assertViewIs('auth.register-mail')
            ->assertSee('Регистрация')
            ->assertSee('Зарегистрироваться')
        ;
    }
    /** @test */
    public function it_validation_success(): void
    {
        $this->request()->assertValid();
    }
    /** @test */
    public function it_should_fail_validation_on_password_confirm(): void
    {
        $this->request['password'] = '12312344asd!';
        $this->request['password_confirmation'] = '12312344asd!!';
        $this->request()->assertInvalid(['password']);
    }
    /** @test */
    public function it_user_created_success(): void
    {
        $this->assertDatabaseMissing('users', ['email' => $this->request['email']]);
        $this->request();
        $this->assertDatabaseHas('users', ['email' => $this->request['email']]);
    }
    /** @test */
    public function it_should_fail_validation_on_unique_email(): void
    {
        UserFactory::new()->create(['email' => $this->request['email']]);
        $this->assertDatabaseHas('users', ['email' => $this->request['email']]);
        $this->request()->assertInvalid('email');
    }
    /** @test */
    public function it_registered_event_and_listeners_dispatched(): void
    {
        Event::fake();
        $this->request();
        Event::assertDispatched(Registered::class);
        Event::assertListening(Registered::class, SendEmailNewUserListener::class);
    }
    /** @test */
    public function it_notification_sent(): void
    {
        $this->request();
        Notification::assertSentTo(
            $this->findUser(),
            NewUserNotification::class
        );
    }
    /** @test */
    public function it_user_authenticated_after_and_redirected(): void
    {
        $this->request()
            ->assertRedirect(action(HomeController::class));

    }


    /** @test */
    public function it_should_fail_validation_on_email_dns(): void
    {
        $this->request['email'] = 'kek@ya12313123123.ru';
        $this
            ->request()
            ->assertInvalid('email');
    }
    /** @test */
    public function it_should_fail_validation_on_password_strong(): void
    {
        $this->request['password'] = '12312344';
        $this->request['password_confirmation'] = '12312344';
        $this->request()
            ->assertInvalid('password');
    }

}
